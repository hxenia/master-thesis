theory AggregateSignature_ValidationModel_IndexAsCounter

//Theory Description:
//==================
//This model should demonstrate that one can alternatively 
//use a Counter insead of a Nonce as Index.
//It is an earlier version of the models and should only be 
//used as an example, so see, how the Aggregator (here called Glacier)
//uses the Counter.

//This Theorie misses:
//====================
//Consistency restriction
//Honest key fact inside the correctness restriction
//rules that allow the valley to receive one aggregated signature
//the agent names are from an old version of the protocol.
//The aggregator aggregates only two signatures

begin

builtins: signing, multiset

functions: agg/2 // first: a multiset of a pair of signatures and counters
                 // second: the length of the aggregation as a counter
functions: false/0 //for the correctness definition
  

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltkA) ]
--[ Honest(pk(~ltkA)) ]->
  [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)),  Out(pk(~ltkA)) ]


// Protocol
/* New Protocol: 
Temperature measurung devices (Temp_i) are measuring on a glacier.
They send the measurements and the signatures of those measurements to the Glacier station (Glac)
The Gacier staton creates an aggregated signature of the received signatures and sends the aggregation and the messages to the valley station (vall)
The valey station validated the signature aggregation

Temp_1 -> Glac: m1, sign(m1, sk1)
..
Temp_n -> Glac: mn, sign(mn, skn)
Glac -> Vall : (m1, ..., mn), agg(sign(m1, sk1), ..., sign(mn, skn))
*/

rule Temp_send: //A sends the measurement and its signature
  [ !Ltk($Temp, ~sk), Fr(~measurement)]
-->
  [ Out(<~measurement, sign(~measurement, ~sk)>) ]

//The glacier aggregates the receives signatures.
//As the aggregation can also be done by the adversary, Tamarin ignores those rules.
//For now the rules demonstrate, how the aggregation is done
rule Glacier_Receive_1: //The Glacier receives the first measurement and its signature.
  [ In(<m1, s1>) ]
-->
  [ St_Glac_1(m1, agg(<s1, '1'>, '1')) ] //keep track of the number of aggregations, to add more

rule Glacier_Receive_2: //The Glacier receives the second measurement and its signature.
  [ In(<m2, s2>), St_Glac_1(m1, agg(signatures, nr)) ]
-->
  [ St_Glac_2(<m1, m2>, agg(signatures + <s2, nr+'1'>, nr+'1')) ] 
//Todo: add more received measurements

rule Glacier_Send_Aggregate:
  [ St_Galc_2(messages, aggregate) ]
-->
  [ Out(<messages, aggregate>) ]


rule Valley_Receives:
  [ In(<<m1, m2>, agg>), !Pk($Temp1, pk1), !Pk($Temp2, pk2) ] //The valley checks, that it accrually receives two measurements
-->
  [ VfyAgg(agg, <m1, pk1, '1'> + <m2, pk2, '1'+'1'>) ]

rule Valley_Verifies:
  [ VfyAgg(agg, <m1, pk1, nr1> + <m2, pk2, nr2>) ]
--[ VerifyAgg(agg, <m1, pk1, nr1> + <m2, pk2, nr2>, true), Done(pk1, pk2, agg) ]->
  [ AggIsVerified(agg, 'Hurrrah') ] 


//Restrictions:
restriction Verification_Correctness: 
  "All aggregation mAndPk #i. 
    VerifyAgg(aggregation, mAndPk, false)@i
    ==> (Ex si nr thetaAgg mi ski thetaMPk length.
      VerifyAgg(agg(<si, nr>+thetaAgg, length), 
        <mi, pk(ski), nr> + thetaMPk, false)@i
      & not (si = sign(mi, ski)))
    |(Ex si nr mi ski length.
      VerifyAgg(agg(<si, nr>, length), <mi, pk(ski), nr>, false)@i
      & not (si = sign(mi, ski)))"

restriction Verification_Secure:
  "All si thetaAgg mi ski nr thetaMPk length #i. 
    VerifyAgg(agg(<si, nr>+thetaAgg, length), 
         <mi, pk(ski), nr> + thetaMPk, true)@i 
    ==> (not (Ex #j. Honest(pk(ski))@j)
      | sign(mi, ski) = si)"

restriction OneSignaturePerMessageKeyPair:
  "All aggregation mi ski nr thetaMPk #i. VerifyAgg(aggregation, <mi, pk(ski), nr> + thetaMPk, true)@i
  ==> Ex si thetaAgg length. VerifyAgg(agg(<si, nr>+thetaAgg, length), <mi, pk(ski), nr> + thetaMPk, true)@i"

restriction OneMessageKeyPairPerSignature:
  "All si thetaAgg nr messagesKeys length #i. VerifyAgg(agg(<si, nr>+thetaAgg, length), messagesKeys, true)@i
  ==> Ex mi ski thetaMPk. messagesKeys = <mi, pk(ski), nr> + thetaMPk"

//One Signature restrictions
restriction Verification_Secure_OneSignature:
  "All si mi ski nr length #i. 
    VerifyAgg(agg(<si, nr>, length), <mi, pk(ski), nr>, true)@i 
      ==> (not (Ex #j. Honest(pk(ski))@j)
        | sign(mi, ski) = si)"

restriction OneSignaturePerMessageKeyPair_OneSignature:
  "All aggregation mi ski nr #i. VerifyAgg(aggregation, <mi, pk(ski), nr>, true)@i
  ==> Ex si length. VerifyAgg(agg(<si, nr>, length), <mi, pk(ski), nr>, true)@i"

restriction OneMessageKeyPairPerSignature_OneSignature:
  "All si nr messagesKeys length #i. VerifyAgg(agg(<si, nr>, length), messagesKeys, true)@i
  ==> Ex mi ski. messagesKeys = <mi, pk(ski), nr>"

//to ensure that the numbers are unique
restriction NumbersSignatureUnique:
  "not(Ex si sj nr theta messagesAndKeys length #i.
    VerifyAgg(agg(<si, nr>+<sj, nr>+theta, length), messagesAndKeys, true)@i)"

restriction NumbersMessageUnique:
  "not(Ex aggregation mi pki nr mj pkj theta #i.
    VerifyAgg(aggregation, <mi, pki, nr>+<mj, pkj, nr>+theta, true)@i)"

//case two signatures
restriction NumbersSignatureUnique_TwoSignatures:
  "not(Ex si sj nr length messagesAndKeys #i.
    VerifyAgg(agg(<si, nr>+<sj, nr>, length), messagesAndKeys, true)@i)"

restriction NumbersMessageUnique_TwoSignatures:
  "not(Ex aggregation mi pki nr mj pkj #i.
    VerifyAgg(aggregation, <mi, pki, nr>+<mj, pkj, nr>, true)@i)"
	     
//Lemmas
lemma executable:
 exists-trace
  "Ex pk1 pk2 agg #i. Done(pk1, pk2, agg)@i & Ex #j. Honest(pk1)@j & Ex #k. Honest(pk2)@k
    & Ex s1 s2 length. agg = agg(s1 + s2, length)" 

end
