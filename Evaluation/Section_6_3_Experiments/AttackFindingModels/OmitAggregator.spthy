theory AggregateSignature_RuleBased_NoAdditionalAdversaryCapabilities

//Theory Description:
//==================
/*
we use functions and equations to define the aggregation

We use the private function validAgg to model a valid aggregation.
It contains the messages and public keys from the aggregated 
signatures. Honest agents can create such aggregations. The 
adversary has to use the aggregation oracle which is modeled
by the rules Adv_Aggregate and Adv_Aggregate_BaseCase.

The validation is modeled by the function verifyAgg, which takes 
as input a aggregation, a list of messages and a list of key.
The validation is correct, if the messages and keys match those 
inside the aggregation.
*/

//Assumptions:
//============
/*
- The public keys as aggregation input are omited
- No adversary capability was added
- the aggregation is applied incrementally
- The aggregating agents are implicitly checking the signatures
  , they aggregate.
*/

//Questions:
//=========

//Proof Time: TODO

begin

builtins: signing, multiset

functions: verifyAgg/3 //To validate a aggregation, input: aggregation, list of messages, list of public keys
functions: validAgg/2 [private] //represents a valid aggregation, contains a list of messages and s list of public keys

equations: verifyAgg(validAgg(m, k), m, k) = true //true, if the aggregation contains the correct messages and public keys


// Public key infrastructure
//==========================
//from the Tamarin Manual
rule Register_pk:
  [ Fr(~ltkA) ]
--[ RegisterHonestKey(pk(~ltkA))
  , Register($A, ~ltkA) ]->
  [ !Ltk($A, ~ltkA)
  , !Pk($A, pk(~ltkA))
  ,  Out(pk(~ltkA)) ]

rule Reveal_ltk:
  [ !Ltk(A, ltk) ]
--[ LtkReveal(A) ]->
  [ Out(ltk) ]


//Adversary aggregation rules
//===========================
//Valid aggregation
//-----------------
rule Adv_Aggregate:
  [ In(<sign(m, sk), validAgg(messages, keys)>) ] 
-->
  [ Out(validAgg(<m, messages>, <pk(sk), keys>)) ]

rule Adv_Aggregate_BaseCase:
  [ In(sign(m, sk)) ]
-->
  [Out(validAgg(m, pk(sk))) ]


/* Protocol 
   ========
- Temperature sensors (Sensor_i) are taking measurements on a glacier.
  They send the measurements and the signatures of those measurements 
  to the Glacier station (Glac)
- The Gacier station creates an aggregated signature of the received 
  signatures and sends the aggregation and the messages to the 
  valley station (vall)
- The valley station looks up the keys and then validates the signature 
  aggregation

Sensor_1 -> Glac: m1, sign(m1, sk1), Sensor_1
..
Sensor_n -> Glac: mn, sign(mn, skn), Sensor_n
Glac -> Vall : (m1, ..., mn), (Sensor_1, ..., Sensor_n), agg(sign(m1, sk1), ..., sign(mn, skn))
Val: lookup keys then verify aggregation
*/

//Sensor
//------
rule Sensor_send: //A sends the measurement and its signature
  [ !Ltk($Sensor, ~sk), Fr(~measurement)]
--[ Sign($Sensor, ~measurement, ~sk)
  , Running_weakAgreement($Sensor, $Valley)
  , Running_aliveness($Sensor)
  , Running_aliveness_message($Sensor, ~measurement)
  , Signed($Sensor, ~measurement) ]->
  [ Out(<~measurement, $Sensor, sign(~measurement, ~sk)>) ]


//Glacier
//-------
//As the aggregation can be done by the adversary, we omit the glacier role.

//Valley
//------
rule Valley_Receives_aggregation:
  [ In(<aggregation, messagesAndNames>) ]
-->
  [ ValleyReceivedAggregation(aggregation, messagesAndNames) ] 

//Lookup keys
rule Valley_LookupKey_last:
  [ ValleyReceivedAggregation(aggregation, <mn, $Sensor_n>+restMessagesAndNames) 
  , !Pk($Sensor_n, pkn) ]
-->
  [ ValleyLookupKey(aggregation, mn, pkn, restMessagesAndNames, <mn, $Sensor_n>+restMessagesAndNames) ]

rule Valley_LookupKey_singel:
  [ ValleyReceivedAggregation(aggregation, <m1, $Sensor_1>) 
  , !Pk($Sensor_1, pk1) ]
-->
  [ ValleyKeysLookedUp(aggregation, m1, pk1, <m1, $Sensor_1>) ]

rule Valley_LookupKey_i:
  [ ValleyLookupKey(aggregation, messages, keys, <mi, $Sensor_i>+restMessagesAndNames, AllMessagesAndNames)
  , !Pk($Sensor_i, pki) ]
-->
  [ ValleyLookupKey(aggregation, <mi, messages>, <pki, keys>, restMessagesAndNames, AllMessagesAndNames) ]

rule Valley_LookupKey_first:
  [ ValleyLookupKey(aggregation, messages, keys, <m1, $Sensor_1>, AllMessagesAndNames)
  , !Pk($Sensor_1, pk_1) ]
-->
  [ ValleyKeysLookedUp(aggregation, <m1, messages>, <pk_1, keys>, AllMessagesAndNames) ]

//Verification
rule Valley_verifies:
  [ ValleyKeysLookedUp(aggregation, messages, keys, AllMessagesAndNames) ] 
--[ Correct(verifyAgg(aggregation, messages, keys), true)
  , Limit(messages)
  , Limit(keys)
  , Finish()
  , Done(aggregation, messages, keys)
  , ValleyVerifies(aggregation, messages, keys, true) ]->
  [ AggIsVerified(aggregation, messages, keys, 'Hurrrah', AllMessagesAndNames) ]

//Look at messages for agreement lemmas
rule Valley_looksAtMessage:
  [ AggIsVerified(aggregation, messages, keys, 'Hurrrah', <m, $Sensor>+restMessagesAndNames)
  , !Pk($Sensor, pk) ]
--[ Commit($Valley, $Sensor)
  , Commit_message($Valley, $Sensor, m)
  , ClaimHonest($Sensor)
  , ClaimHonest($Valley)
  , Limit(messages)
  , Limit(keys) ]->
  [ ValleyLookedAtMessage(aggregation, messages, keys, m, pk) ]

rule Valley_looksAtMessage_oneSignature:
  [ AggIsVerified(aggregation, messages, keys, 'Hurrrah', <m, $Sensor>)
  , !Pk($Sensor, pk) ]
--[ Commit($Valley, $Sensor)
  , Commit_message($Valley, $Sensor, m)
  , ClaimSigned($Sensor, m)
  , ClaimHonest($Sensor)
  , ClaimHonest($Valley)
  , Limit(messages)
  , Limit(keys) ]->
  [ ValleyLookedAtMessage(aggregation, messages, keys, m, pk) ]


//Restrictions:
//=============
restriction validationCorrect:
  "All v b #i. Correct(v, b)@i ==> v = b"


//Lemmas
//======

//Trace exist lemmas to show valid traces
//---------------------------------------
lemma executable_oneSignature:
 exists-trace
  "Ex aggregate m pk #i.
    Done(aggregate, m, pk)@i
    & Ex #j. RegisterHonestKey(pk)@j"

lemma executable_oneSignature_nice:
 exists-trace
  "Ex aggregate m pk #i.
    Done(aggregate, m, pk)@i
    & Ex #j. RegisterHonestKey(pk)@j
  "
  
lemma executable_twoSignatures:
 exists-trace
  "Ex aggregate pk1 pk2 m1 m2 #i.
    Done(aggregate, <m1, m2>, <pk1, pk2>)@i
    & Ex #j1 #j2. RegisterHonestKey(pk1)@j1 & RegisterHonestKey(pk2)@j2
  "

lemma executable_twoSignatures_nice:
 exists-trace
  "Ex aggregate pk1 pk2 m1 m2 #i.
    Done(aggregate, <m1, m2>, <pk1, pk2>)@i
    & Ex #j1 #j2. RegisterHonestKey(pk1)@j1 & RegisterHonestKey(pk2)@j2
  "

//Authentication Lemmas
//---------------------
//Aliveness Lemma addapted form Tamarin Manual and FMSec lecture slides
lemma aliveness:
  "All valley sensor #i.Commit(valley, sensor)@i
  ==>  (Ex #j. Running_aliveness(sensor)@j)
    | (Ex C #r. LtkReveal(C)@r & ClaimHonest(C)@i)
  "

lemma aliveness_message:
  "All valley sensor message #i.Commit_message(valley, sensor, message)@i
  ==>  (Ex #j. Running_aliveness_message(sensor, message)@j)
    | (Ex C #r. LtkReveal(C)@r & ClaimHonest(C)@i)
  "

//Aliveness Lemma addapted form Tamarin Manual and FMSec lecture slides
lemma weak_agreement_falsified:
  "All valley sensor #i. Commit(valley, sensor)@i
  ==> (Ex #j. Running_weakAgreement(sensor, valley) @j)
    | (Ex C #r. LtkReveal(C)@r & ClaimHonest(C)@i)
  "


//Attack Lemmas
//-------------
lemma no_ZeroSplittingAttack:
  "not(Ex agg ma mb k #i #j.
    ValleyVerifies(agg, ma, k, true)@i
    & ValleyVerifies(agg, mb, k, true)@j
    & not (ma = mb))
  "

lemma no_RogueKeyAttack:
  "not(Ex sensor m #i. (ClaimSigned(sensor, m)@i
    & not(Ex #j. Signed(sensor, m)@j)
    & not(Ex #k. LtkReveal(sensor)@k)))
  "

end
