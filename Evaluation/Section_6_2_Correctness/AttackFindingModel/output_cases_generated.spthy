theory testcases

begin

builtins: signing, multiset

functions: verifyAgg/3
functions: validAgg/2 [private]
functions: false/0

equations: verifyAgg(validAgg(m, k), m, k) = true

// Public key infrastructure
rule Register_pk:
  [ Fr(~ltkA) ]
--[ RegisterHonestKey(pk(~ltkA))
  , Register($A, ~ltkA) ]->
  [ !Ltk($A, ~ltkA)
  , !Pk($A, pk(~ltkA))
  ,  Out(pk(~ltkA)) ]
// Valid  
rule OneValidSignature:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ Correct(verifyAgg(validAgg(~m, pk(~sk)), ~m, pk(~sk)), true),
    OneValidSignature() ]->
  [ ]
  
rule TwoValidSignatures:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>), <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TwoValidSignatures() ]->
  [ ]

rule ThreeValidSignatures:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>),
    <~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>), true),
    ThreeValidSignatures() ]->
  [ ]

rule ThreeValidSignatures_twiceTheSameMessage:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk3)>),
    <~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk3)>), true),
    ThreeValidSignatures_twiceTheSameMessage() ]->
  [ ]

rule ThreeValidSignatures_twiceTheSameKey:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk2)>),
    <~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk2)>), true),
    ThreeValidSignatures_twiceTheSameKey() ]->
  [ ]

rule ThreeValidSignatures_twiceTheSameSignature:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>),
    <~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>), true),
    ThreeValidSignatures_twiceTheSameSignature() ]->
  [ ]

rule SixSignatures:
  [ Fr(~m1), Fr(~m2), Fr(~m3), Fr(~m4), Fr(~m5), Fr(~m6),
    !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3), !Ltk($A4, ~sk4), !Ltk($A5, ~sk5), !Ltk($A6, ~sk6) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m3, ~m4, ~m5, ~m6>
        , <pk(~sk1), pk(~sk2), pk(~sk3), pk(~sk4), pk(~sk5), pk(~sk6)>),
    <~m1, ~m2, ~m3, ~m4, ~m5, ~m6>,
    <pk(~sk1), pk(~sk2), pk(~sk3), pk(~sk4), pk(~sk5), pk(~sk6)>), true),
    SixSignatures() ]->
  [ ]

rule TwiceTheSameMessageAndKey:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ Correct(verifyAgg(validAgg(<~m, ~m>, <pk(~sk), pk(~sk)>),
      <~m, ~m>, <pk(~sk), pk(~sk)>), true),
      TwiceTheSameMessageAndKey() ]->
  [ ]

// Not Honest Keys, here treated as valid
rule NotHonestKeys_correctSignature:
  [ Fr(~m), Fr(~sk) ]
--[ Correct(verifyAgg(validAgg(~m, pk(~sk)), ~m, pk(~sk)), true),
    NotHonestKeys_correctSignature() ]->
  [ ]


// Dublicate Valid
// Valid  
rule OneValidSignature_false:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(~sk)), ~m, pk(~sk)), true),
    OneValidSignature_false() ]->
  [ ]
  
rule TwoValidSignatures_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>), <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TwoValidSignatures_false() ]->
  [ ]

rule ThreeValidSignatures_false:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>),
    <~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>), true),
    ThreeValidSignatures_false() ]->
  [ ]

rule ThreeValidSignatures_twiceTheSameMessage_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk3)>),
    <~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk3)>), true),
    ThreeValidSignatures_twiceTheSameMessage_false() ]->
  [ ]

rule ThreeValidSignatures_twiceTheSameKey_false:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk2)>),
    <~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk2)>), true),
    ThreeValidSignatures_twiceTheSameKey_false() ]->
  [ ]

rule ThreeValidSignatures_twiceTheSameSignature_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>),
    <~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>), true),
    ThreeValidSignatures_twiceTheSameSignature_false() ]->
  [ ]

rule SixSignatures_false:
  [ Fr(~m1), Fr(~m2), Fr(~m3), Fr(~m4), Fr(~m5), Fr(~m6),
    !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3), !Ltk($A4, ~sk4), !Ltk($A5, ~sk5), !Ltk($A6, ~sk6) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m3, ~m4, ~m5, ~m6>
        , <pk(~sk1), pk(~sk2), pk(~sk3), pk(~sk4), pk(~sk5), pk(~sk6)>),
    <~m1, ~m2, ~m3, ~m4, ~m5, ~m6>,
    <pk(~sk1), pk(~sk2), pk(~sk3), pk(~sk4), pk(~sk5), pk(~sk6)>), true),
    SixSignatures_false() ]->
  [ ]

rule TwiceTheSameMessageAndKey_false:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ InCorrect(verifyAgg(validAgg(<~m, ~m>, <pk(~sk), pk(~sk)>),
      <~m, ~m>, <pk(~sk), pk(~sk)>), true),
      TwiceTheSameMessageAndKey_false() ]->
  [ ]

// Not Honest Keys, here treated as valid
rule NotHonestKeys_correctSignature_false:
  [ Fr(~m), Fr(~sk) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(~sk)), ~m, pk(~sk)), true),
    NotHonestKeys_correctSignature_false() ]->
  [ ]


// Invalid
rule OneValidSignature_WrongMessage:
  [ Fr(~m1), Fr(~m2), !Ltk($A, ~sk) ]
--[ Correct(verifyAgg(validAgg(~m1, pk(~sk)), ~m2, pk(~sk)), true),
    OneValidSignature_WrongMessage() ]->
  [ ]

rule OneValidSignature_WrongKey:
  [ Fr(~m), !Ltk($A, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(~m, pk(~sk1)), ~m, pk(~sk2)), true),
    NotEqual($A, $A2),
    OneValidSignature_WrongKey() ]->
  [ ]

rule OneValidSignature_WrongMessageAndKey:
  [ Fr(~m1), Fr(~m2), !Ltk($A, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(~m1, pk(~sk1)), ~m2, pk(~sk2)), true),
    NotEqual($A, $A2),
    OneValidSignature_WrongMessageAndKey() ]->
  [ ]

rule TwoValidSignatures_MessagesSwapped:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>), <~m2, ~m1>, <pk(~sk1), pk(~sk2)>), true),
    TwoValidSignatures_MessagesSwapped() ]->
  [ ]

rule TwoValidSignatures_OrderSwapped:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m2, ~m1>, <pk(~sk2), pk(~sk1)>), <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TwoValidSignatures_OrderSwapped() ]->
  [ ]

rule TwoValidSignatures_KeySwaped:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>), <~m1, ~m2>, <pk(~sk2), pk(~sk1)>), true),
    NotEqual(~sk1, ~sk2),
    TwoValidSignatures_KeySwaped() ]->
  [ ]

rule NotHonestKeys_NonMatchingKey_verifyingHonest:
  [ Fr(~m), Fr(~sk1),  !Ltk($A, sk2) ]
--[ Correct(verifyAgg(validAgg(~m, pk(~sk1)), ~m, pk(sk2)), true),
    NotHonestKeys_NonMatchingKey_verifyingHonest() ]->
  [ ]




// Wrong Format
rule TooManyMessages:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>),
      <~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>), true),
    TooManyMessages() ]->
  [ ]

rule TooManySignatures:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>),
      <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TooManySignatures() ]->
  [ ]

rule NoPublicKey:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ Correct(verifyAgg(validAgg(~m, pk(~sk)), ~m, ~sk), true),
    NoPublicKey()]->
  [ ]

rule MissingAggFunction:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ Correct(verifyAgg(sign(~m, ~sk), ~m, pk(~sk)), true),
    MissingAggFunction() ]->
  [ ]

rule TooManyMessages_OneTwice:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>),
      <~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>), true),
    TooManyMessages_OneTwice() ]->
  [ ]

rule TooManySignatures_OneTwice:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ Correct(verifyAgg(validAgg(<~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>),
      <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TooManySignatures_OneTwice() ]->
  [ ]


// Not Honest Keys, correct format, here treated as invalid
rule NotHonestKeys_NonMatchingMessage:
  [ Fr(~m1), Fr(~m2),  Fr(~sk) ]
--[ Correct(verifyAgg(validAgg(~m1, pk(~sk)), ~m2, pk(~sk)), true),
    NotHonestKeys_NonMatchingMessage() ]->
  [ ]

rule NotHonestKeys_NonMatchingKey_BothNonHonest:
  [ Fr(~m), Fr(~sk1),  Fr(~sk2) ]
--[ Correct(verifyAgg(validAgg(~m, pk(~sk1)), ~m, pk(~sk2)), true),
   NotHonestKeys_NonMatchingKey_BothNonHonest() ]->
  [ ]

rule NotHonestKeys_NonMatchingKey_signingHonest:
  [ Fr(~m), !Ltk($A, sk1),  Fr(~sk2) ]
--[ Correct(verifyAgg(validAgg(~m, pk(sk1)), ~m, pk(~sk2)), true),
   NotHonestKeys_NonMatchingKey_signingHonest() ]->
  [ ]



// Dublicate Invalid
// Invalid
rule OneValidSignature_WrongMessage_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A, ~sk) ]
--[ InCorrect(verifyAgg(validAgg(~m1, pk(~sk)), ~m2, pk(~sk)), true),
    OneValidSignature_WrongMessage_false() ]->
  [ ]

rule OneValidSignature_WrongKey_false:
  [ Fr(~m), !Ltk($A, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(~sk1)), ~m, pk(~sk2)), true),
    NotEqual($A, $A2),
    OneValidSignature_WrongKey_false() ]->
  [ ]

rule OneValidSignature_WrongMessageAndKey_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(~m1, pk(~sk1)), ~m2, pk(~sk2)), true),
    NotEqual($A, $A2),
    OneValidSignature_WrongMessageAndKey_false() ]->
  [ ]

rule TwoValidSignatures_MessagesSwapped_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>), <~m2, ~m1>, <pk(~sk1), pk(~sk2)>), true),
    TwoValidSignatures_MessagesSwapped_false() ]->
  [ ]

rule TwoValidSignatures_OrderSwapped_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m2, ~m1>, <pk(~sk2), pk(~sk1)>), <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TwoValidSignatures_OrderSwapped_false() ]->
  [ ]

rule TwoValidSignatures_KeySwaped_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>), <~m1, ~m2>, <pk(~sk2), pk(~sk1)>), true),
    NotEqual(~sk1, ~sk2),
    TwoValidSignatures_KeySwaped_false() ]->
  [ ]

rule NotHonestKeys_NonMatchingKey_verifyingHonest_false:
  [ Fr(~m), Fr(~sk1),  !Ltk($A, sk2) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(~sk1)), ~m, pk(sk2)), true),
    NotHonestKeys_NonMatchingKey_verifyingHonest_false() ]->
  [ ]




// Wrong Format
rule TooManyMessages_false:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>),
      <~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>), true),
    TooManyMessages_false() ]->
  [ ]

rule TooManySignatures_false:
  [ Fr(~m1), Fr(~m2), Fr(~m3), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2), !Ltk($A3, ~sk3) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m3>, <pk(~sk1), pk(~sk2), pk(~sk3)>),
      <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TooManySignatures_false() ]->
  [ ]

rule NoPublicKey_false:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(~sk)), ~m, ~sk), true),
    NoPublicKey_false() ]->
  [ ]

rule MissingAggFunction_false:
  [ Fr(~m), !Ltk($A, ~sk) ]
--[ InCorrect(verifyAgg(sign(~m, ~sk), ~m, pk(~sk)), true),
    MissingAggFunction_false() ]->
  [ ]

rule TooManyMessages_OneTwice_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2>, <pk(~sk1), pk(~sk2)>),
      <~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>), true),
    TooManyMessages_OneTwice_false() ]->
  [ ]

rule TooManySignatures_OneTwice_false:
  [ Fr(~m1), Fr(~m2), !Ltk($A1, ~sk1), !Ltk($A2, ~sk2) ]
--[ InCorrect(verifyAgg(validAgg(<~m1, ~m2, ~m2>, <pk(~sk1), pk(~sk2), pk(~sk2)>),
      <~m1, ~m2>, <pk(~sk1), pk(~sk2)>), true),
    TooManySignatures_OneTwice_false() ]->
  [ ]


// Not Honest Keys, correct format, here treated as invalid
rule NotHonestKeys_NonMatchingMessage_false:
  [ Fr(~m1), Fr(~m2),  Fr(~sk) ]
--[ InCorrect(verifyAgg(validAgg(~m1, pk(~sk)), ~m2, pk(~sk)), true),
    NotHonestKeys_NonMatchingMessage_false() ]->
  [ ]

rule NotHonestKeys_NonMatchingKey_BothNonHonest_false:
  [ Fr(~m), Fr(~sk1),  Fr(~sk2) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(~sk1)), ~m, pk(~sk2)), true),
   NotHonestKeys_NonMatchingKey_BothNonHonest_false() ]->
  [ ]

rule NotHonestKeys_NonMatchingKey_signingHonest_false:
  [ Fr(~m), !Ltk($A, sk1),  Fr(~sk2) ]
--[ InCorrect(verifyAgg(validAgg(~m, pk(sk1)), ~m, pk(~sk2)), true),
   NotHonestKeys_NonMatchingKey_signingHonest_false() ]->
  [ ]



//Restrictions:
//=============

restriction validationCorrect:
  "All v b #i. Correct(v, b)@i ==> v = b"

restriction validationInCorrect:
  "All v b #i. InCorrect(v, b)@i ==> not (v = b)"
//Restriction for the cases
 restriction NotEqual: 
  "All a b #i. NotEqual(a, b)@i ==> not (a = b)"
//Lemmas
//Valid Aggregations with result = true
lemma OneValidSignature:
 exists-trace
  "Ex #i. OneValidSignature()@i"

lemma TwoValidSignatures:
 exists-trace
  "Ex #i. TwoValidSignatures()@i"

lemma ThreeValidSignatures:
 exists-trace
  "Ex #i. ThreeValidSignatures()@i"

lemma ThreeValidSignatures_twiceTheSameMessage:
 exists-trace
  "Ex #i. ThreeValidSignatures_twiceTheSameMessage()@i"

lemma ThreeValidSignatures_twiceTheSameKey:
 exists-trace
  "Ex #i. ThreeValidSignatures_twiceTheSameKey()@i"

lemma ThreeValidSignatures_twiceTheSameSignature:
 exists-trace
  "Ex #i. ThreeValidSignatures_twiceTheSameSignature()@i"

lemma SixSignatures:
 exists-trace
  "Ex #i. SixSignatures()@i"

lemma TwiceTheSameMessageAndKey:
 exists-trace
  "Ex #i. TwiceTheSameMessageAndKey()@i"

lemma NotHonestKeys_correctSignature:
 exists-trace
  "Ex #i. NotHonestKeys_correctSignature()@i"

//Valid Aggregations with result = false
lemma OneValidSignature_false:
  "not (Ex #i. OneValidSignature_false()@i)"

lemma TwoValidSignatures_false:
  "not (Ex #i. TwoValidSignatures_false()@i)"

lemma ThreeValidSignatures_false:
  "not (Ex #i. ThreeValidSignatures_false()@i)"

lemma ThreeValidSignatures_twiceTheSameMessage_false:
  "not (Ex #i. ThreeValidSignatures_twiceTheSameMessage_false()@i)"

lemma ThreeValidSignatures_twiceTheSameKey_false:
  "not (Ex #i. ThreeValidSignatures_twiceTheSameKey_false()@i)"

lemma ThreeValidSignatures_twiceTheSameSignature_false:
  "not (Ex #i. ThreeValidSignatures_twiceTheSameSignature_false()@i)"

lemma SixSignatures_false:
  "not (Ex #i. SixSignatures_false()@i)"

lemma TwiceTheSameMessageAndKey_false:
  "not (Ex #i. TwiceTheSameMessageAndKey_false()@i)"

lemma NotHonestKeys_correctSignature_false:
  "not (Ex #i. NotHonestKeys_correctSignature_false()@i)"

//Invalid Aggregations with result = true
lemma OneValidSignature_WrongMessage:
  "not (Ex #i. OneValidSignature_WrongMessage()@i)"

lemma OneValidSignature_WrongKey:
  "not (Ex #i. OneValidSignature_WrongKey()@i)"

lemma OneValidSignature_WrongMessageAndKey:
  "not (Ex #i. OneValidSignature_WrongMessageAndKey()@i)"

lemma TwoValidSignatures_MessagesSwapped:
  "not (Ex #i. TwoValidSignatures_MessagesSwapped()@i)"

lemma TwoValidSignatures_OrderSwapped:
  "not (Ex #i. TwoValidSignatures_OrderSwapped()@i)"

lemma TwoValidSignatures_KeySwaped:
  "not (Ex #i. TwoValidSignatures_KeySwaped()@i)"

lemma NotHonestKeys_NonMatchingKey_verifyingHonest:
  "not (Ex #i. NotHonestKeys_NonMatchingKey_verifyingHonest()@i)"

lemma TooManyMessages:
  "not (Ex #i. TooManyMessages()@i)"

lemma TooManySignatures:
  "not (Ex #i. TooManySignatures()@i)"

lemma NoPublicKey:
  "not (Ex #i. NoPublicKey()@i)"

lemma MissingAggFunction:
  "not (Ex #i. MissingAggFunction()@i)"

lemma TooManyMessages_OneTwice:
  "not (Ex #i. TooManyMessages_OneTwice()@i)"

lemma TooManySignatures_OneTwice:
  "not (Ex #i. TooManySignatures_OneTwice()@i)"

lemma NotHonestKeys_NonMatchingMessage:
  "not (Ex #i. NotHonestKeys_NonMatchingMessage()@i)"

lemma NotHonestKeys_NonMatchingKey_BothNonHonest:
  "not (Ex #i. NotHonestKeys_NonMatchingKey_BothNonHonest()@i)"

lemma NotHonestKeys_NonMatchingKey_signingHonest:
  "not (Ex #i. NotHonestKeys_NonMatchingKey_signingHonest()@i)"

//Invalid Aggregations with result = false
lemma OneValidSignature_WrongMessage_false:
 exists-trace
  "Ex #i. OneValidSignature_WrongMessage_false()@i"

lemma OneValidSignature_WrongKey_false:
 exists-trace
  "Ex #i. OneValidSignature_WrongKey_false()@i"

lemma OneValidSignature_WrongMessageAndKey_false:
 exists-trace
  "Ex #i. OneValidSignature_WrongMessageAndKey_false()@i"

lemma TwoValidSignatures_MessagesSwapped_false:
 exists-trace
  "Ex #i. TwoValidSignatures_MessagesSwapped_false()@i"

lemma TwoValidSignatures_OrderSwapped_false:
 exists-trace
  "Ex #i. TwoValidSignatures_OrderSwapped_false()@i"

lemma TwoValidSignatures_KeySwaped_false:
 exists-trace
  "Ex #i. TwoValidSignatures_KeySwaped_false()@i"

lemma NotHonestKeys_NonMatchingKey_verifyingHonest_false:
 exists-trace
  "Ex #i. NotHonestKeys_NonMatchingKey_verifyingHonest_false()@i"

lemma TooManyMessages_false:
 exists-trace
  "Ex #i. TooManyMessages_false()@i"

lemma TooManySignatures_false:
 exists-trace
  "Ex #i. TooManySignatures_false()@i"

lemma NoPublicKey_false:
 exists-trace
  "Ex #i. NoPublicKey_false()@i"

lemma MissingAggFunction_false:
 exists-trace
  "Ex #i. MissingAggFunction_false()@i"

lemma TooManyMessages_OneTwice_false:
 exists-trace
  "Ex #i. TooManyMessages_OneTwice_false()@i"

lemma TooManySignatures_OneTwice_false:
 exists-trace
  "Ex #i. TooManySignatures_OneTwice_false()@i"

lemma NotHonestKeys_NonMatchingMessage_false:
 exists-trace
  "Ex #i. NotHonestKeys_NonMatchingMessage_false()@i"

lemma NotHonestKeys_NonMatchingKey_BothNonHonest_false:
 exists-trace
  "Ex #i. NotHonestKeys_NonMatchingKey_BothNonHonest_false()@i"

lemma NotHonestKeys_NonMatchingKey_signingHonest_false:
 exists-trace
  "Ex #i. NotHonestKeys_NonMatchingKey_signingHonest_false()@i"


 end